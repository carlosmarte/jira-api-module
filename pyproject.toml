[tool.poetry]
name = "jira-api"
version = "0.1.0"
description = "A comprehensive Python package for interacting with Jira Cloud REST API v3"
authors = ["Carlos Marte <carlos@example.com>"]
readme = "README.md"
license = "MIT"
homepage = "https://github.com/carlosmarte/jira-api-module"
repository = "https://github.com/carlosmarte/jira-api-module"
documentation = "https://carlosmarte.github.io/jira-api-module"
keywords = ["jira", "atlassian", "api", "rest", "cloud"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
]
packages = [{include = "jira_api", from = "src"}]

[tool.poetry.dependencies]
python = "^3.9"
httpx = "^0.25.0"
pydantic = "^2.0.0"
pydantic-settings = "^2.0.0"
typer = {extras = ["all"], version = "^0.9.0"}
rich = "^13.0.0"
fastapi = "^0.104.0"
uvicorn = {extras = ["standard"], version = "^0.24.0"}

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.0"
pytest-cov = "^4.1.0"
pytest-mock = "^3.11.0"
pytest-asyncio = "^0.21.0"
mypy = "^1.5.0"
ruff = "^0.1.0"
mkdocs = "^1.5.0"
mkdocs-material = "^9.4.0"
mkdocstrings = {extras = ["python"], version = "^0.23.0"}
pre-commit = "^3.4.0"

[tool.poetry.scripts]
jira-api = "jira_api.cli:app"
jira-server = "jira_api.server:start_server"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
target-version = "py39"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.9"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]